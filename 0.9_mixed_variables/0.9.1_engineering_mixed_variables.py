""" 
Engineering mixed variables
- We've seen that mixed variables are those which values contain both numbers and labels. 
- A mixed variable can contain numbers OR labels in different observations, or numbers AND labels in each observation.

- For example, the variable vehicle registration is an example of letters and numbers combined in each observation 
        (e.g., NK11DGX)

How can we engineer mixed variables?
- We can sometimes derive meaningful features by extracting the categorical part in one variable and the 
        numerical part in a different variable. 
- Therefore, we obtain 2 variables from the original one. 
- Then we proceed with the derived variables as we would do with any categorical or numerical variable.

Let's explore how we can do that. """

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


""" Example 1: the observations of the variable contain either numbers or strings """

# For this part, we will work with the simulated sample we used in section 2

# open_il_24m indicates:
# "Number of installment accounts opened in past 24 months".
# Installment accounts are those that, at the moment of acquiring them,
# there is a set period and amount of repayments agreed between the
# lender and borrower. An example of this is a car loan, or a student loan.
# the borrowers know that they are going to pay a fixed amount over a fixed period

data = pd.read_csv('dataset/sample_s2.csv')

data.head()
"""
        id open_il_24m
0  1077501           C
1  1077430           A
2  1077175           A
3  1076863           A
4  1075358           A """

# let's inspect the mixed variable
data['open_il_24m'].unique()
""" array(['C', 'A', 'B', '0.0', '1.0', '2.0', '4.0', '3.0', '6.0', '5.0',
       '9.0', '7.0', '8.0', '13.0', '10.0', '19.0', '11.0', '12.0',
       '14.0', '15.0'], dtype=object) """

""" 
- The variable is mixed: 
        some observations show numbers as values whereas others 
        show one of three codes which meanings are depicted below. """

# Fictitious meaning of the different letters / codes:

# 'A': couldn't identify the person
# 'B': no relevant data
# 'C': person seems not to have any account open

# let's inspect the number of observations per value of the variable
fig = data['open_il_24m'].value_counts().plot.bar()
fig.set_title('Number of installment accounts open')
fig.set_ylabel('Number of borrowers')
plt.show()

# extract numerical part
data['open_il_24m_numerical'] = pd.to_numeric(data["open_il_24m"],
                                              errors='coerce',
                                              downcast='integer')

# extract categorical part
data['open_il_24m_categorical'] = np.where(data['open_il_24m_numerical'].isnull(),
                                           data['open_il_24m'],
                                           np.nan)

data.head()
""" 
        id open_il_24m  open_il_24m_numerical open_il_24m_categorical
0  1077501           C                    NaN                       C
1  1077430           A                    NaN                       A
2  1077175           A                    NaN                       A
3  1076863           A                    NaN                       A
4  1075358           A                    NaN                       A 

- Note how in the observation where the categorical variable displays a value, 
        the numerical variable contains NA, and vice versa.
"""

# let's inspect those instances of the dataset where numerical is not null
# when the numerical variable is not null the categorical is null
# and vice versa

data.dropna(subset = ['open_il_24m_numerical'], axis=0).head()
""" 
              id open_il_24m  open_il_24m_numerical open_il_24m_categorical
466285  68444620         0.0                    0.0                     NaN
466286  68547583         1.0                    1.0                     NaN
466287  67849662         0.0                    0.0                     NaN
466288  68506885         2.0                    2.0                     NaN
466289  68341763         4.0                    4.0                     NaN """

# let's inspect the missing data in the new variables:
# when the numerical variable is not null the categorical is null
# and vice versa

data.isnull().mean()
""" 
id                         0.000000
open_il_24m                0.000000
open_il_24m_numerical      0.975916
open_il_24m_categorical    0.024084
dtype: float64 """

""" Example 2: the observations of the variable contain numbers and strings """

# let's load again the titanic dataset for demonstration

data = pd.read_csv('dataset/titanic.csv', usecols=['ticket', 'cabin', 'survived'])

data.head()
""" 
   survived  ticket cabin
0         1   24160    B5
1         1  113781   C22
2         0  113781   C22
3         0  113781   C22
4         0  113781   C22 """

data['cabin'].unique()
""" array(['B5', 'C22', 'E12', 'D7', 'A36', 'C101', nan, 'C62', 'B35', 'A23',
       'B58', 'D15', 'C6', 'D35', 'C148', 'C97', 'B49', 'C99', 'C52', 'T',
       'A31', 'C7', 'C103', 'D22', 'E33', 'A21', 'B10', 'B4', 'E40',
       'B38', 'E24', 'B51', 'B96', 'C46', 'E31', 'E8', 'B61', 'B77', 'A9',
       'C89', 'A14', 'E58', 'E49', 'E52', 'E45', 'B22', 'B26', 'C85',
       'E17', 'B71', 'B20', 'A34', 'C86', 'A16', 'A20', 'A18', 'C54',
       'C45', 'D20', 'A29', 'C95', 'E25', 'C111', 'C23', 'E36', 'D34',
       'D40', 'B39', 'B41', 'B102', 'C123', 'E63', 'C130', 'B86', 'C92',
       'A5', 'C51', 'B42', 'C91', 'C125', 'D10', 'B82', 'E50', 'D33',
       'C83', 'B94', 'D49', 'D45', 'B69', 'B11', 'E46', 'C39', 'B18',
       'D11', 'C93', 'B28', 'C49', 'B52', 'E60', 'C132', 'B37', 'D21',
       'D19', 'C124', 'D17', 'B101', 'D28', 'D6', 'D9', 'B80', 'C106',
       'B79', 'C47', 'D30', 'C90', 'E38', 'C78', 'C30', 'C118', 'D36',
       'D48', 'D47', 'C105', 'B36', 'B30', 'D43', 'B24', 'C2', 'C65',
       'B73', 'C104', 'C110', 'C50', 'B3', 'A24', 'A32', 'A11', 'A10',
       'B57', 'C28', 'E44', 'A26', 'A6', 'A7', 'C31', 'A19', 'B45', 'E34',
       'B78', 'B50', 'C87', 'C116', 'C55', 'D50', 'E68', 'E67', 'C126',
       'C68', 'C70', 'C53', 'B19', 'D46', 'D37', 'D26', 'C32', 'C80',
       'C82', 'C128', 'E39', 'D', 'F4', 'D56', 'F33', 'E101', 'E77', 'F2',
       'D38', 'F', 'E121', 'E10', 'G6', 'F38'], dtype=object) """

data['ticket'].unique()
""" array(['24160', '113781', '19952', '13502', '112050', '11769', 'PC 17609',
       'PC 17757', 'PC 17477', '19877', '27042', 'PC 17318', 'PC 17558',
       '11813', '13050', '11751', '111369', 'PC 17483', '13905', '11967',
       'PC 17760', '110564', '113784', '112277', '36928', '113783',
       '110489', 'PC 17608', '113505', '111427', '113054', 'PC 17591',
       '112379', 'PC 17610', '16966', '113050', '113798', 'PC 17476',
       'PC 17606', 'PC 17755', '695', '113059', '113760', '19924',
       '17770', 'W.E.P. 5734', '113806', '110152', 'PC 17594', '112051',
       '13508', '110465', '5727', 'PC 17756', '11770', '113791',
       'WE/P 5735', '112901', 'PC 17599', '113055', '113804',
       'F.C. 12750', '17474', '33638', 'PC 17761', '11755', 'PC 17485',
       'PC 17580', '11767', '36947', 'PC 17531', 'PC 17598', '17421',
       'PC 17474', '113051', '19950', '113778', 'PC 17611', '17765',
       '13568', '13567', '112058', '113803', '111320', '113503', '112378',
       'PC 17593', '17453', 'PC 17754', '113780', '112053', 'PC 17582',
       'PC 17759', '11765', 'PC 17572', '113796', '36973', '112059',
       '16988', '12749', '113038', '17463', '680', '111361', '113789',
       '111426', '19943', 'PC 17600', '113572', 'PC 17595', '694',
       '113044', '11771', '17464', '11753', '113028', '17465', 'PC 17612',
       '17475', '112377', 'PC 17592', '113501', '113801', 'PC 17569',
       '110469', '11774', '113773', 'PC 17482', 'PC 17473', 'PC 17604',
       '13509', '19928', '13236', '113787', 'PC 17596', '35273', '11752',
       '693', 'PC 17758', 'F.C. 12998', '113509', 'PC 17562', '112052',
       '113043', '113776', '113786', '19972', 'PC 17607', 'PC 17590',
       '111428', '113767', 'PC 17613', 'PC 17585', '13049', 'PC 17603',
       '113790', '19988', '111163', '113794', 'PC 17475', '13507',
       '13213', '113788', '113792', '17764', '13695', '113056', '21228',
       '13214', '113514', '11778', 'PC 17605', '36963', '17466', '110413',
       '19996', '2543', 'PC 17601', '111240', '36967', '110813', '113800',
       '35281', '113795', 'PC 17597', '113510', '19947', '113807',
       'P/PP 3381', '248744', '231945', 'C.A. 34050', '226875', '244346',
       '29108', 'C.A. 31030', '28551', 'C.A./SOTON 34068', 'S.O.P. 1166',
       '2908', '244358', '230136', '248698', '28404', '28425', '237670',
       '211535', '220367', '248733', '29750', '236853', '27849', '234686',
       '244310', '236852', '248738', 'F.C.C. 13528', '239853', '28424',
       '244252', '248731', 'SC/AH 29037', '237789', '2003', 'W./C. 14263',
       '248740', '28034', 'C.A. 31921', 'W./C. 14266', '237249',
       'F.C.C. 13534', '29107', 'C.A. 33112', 'S.O.C. 14879', '237668',
       '244360', 'SC/PARIS 2167', 'C.A. 31029', '231919', '28403',
       '28220', 'SC/PARIS 2149', 'SC/PARIS 2148', '29751', '236854',
       '236171', '2926', 'C.A. 15185', '229236', '239854', '237671',
       '239865', '28664', '243880', '31028', 'C.A. 30769', '28133',
       '28134', '248726', '233866', '12233', '250646', '250647', '250653',
       '250649', '248746', '248727', 'S.W./PP 752', 'W/C 14208',
       'F.C.C. 13529', '220845', '248706', '250650', '29105', '29104',
       '242963', '250643', '26707', '237798', '24065', 'SCO/W 1585',
       'SO/C 14885', '243847', '237565', 'C.A. 33111', 'SC/AH Basle 541',
       '244367', '226593', '233734', '223596', '219533', '239855',
       'C.A. 18723', '250651', '240261', 'SC/Paris 2123', 'SC 1748',
       'C.A. 34260', 'SC/Paris 2163', 'C.A. 29566', '235509',
       'SC/AH 3085', 'S.O./P.P. 3', '237735', 'S.C./PARIS 2079',
       'SC/A.3 2861', '28228', '239059', '237216', '233478', '250644',
       'SW/PP 751', '248723', '234360', 'C.A. 24580', '211536', '29011',
       '250655', '240276', '237736', '230080', '244368', '218629',
       'SC/PARIS 2166', 'C.A. 29395', '28213', 'W./C. 14260',
       'SC/PARIS 2146', '244278', 'SC/PARIS 2147', 'SC 14888', '230433',
       '28665', 'SC/PARIS 2131', '237393', 'S.O./P.P. 2', '234604',
       'C.A. 34644', 'SC/PARIS 2168', '26360', 'C.A. 17248', '31027',
       '230434', 'SC/PARIS 2133', '29106', 'W./C. 14258', '28004',
       'C.A. 31026', '248659', '244361', '250652', '250648', '237442',
       '234818', '28206', '31418', 'C.A. 29178', '237734', 'F.C.C. 13540',
       '248734', 'F.C.C. 13531', '233639', '240929', '34218', '11668',
       '28221', 'CA 31352', '28666', '239856', 'C.A. 33595', '27267',
       '228414', '29103', 'C.A. 34651', 'C.A. 24579', 'SC/PARIS 2159',
       '244270', '244373', '220844', '248747', 'C.A. 5547', 'C.A. 2673',
       '348125', '348122', 'SOTON/O2 3101284', '2657', 'C 7076', '341826',
       '7546', '392091', '2699', '3474', 'SOTON/O2 3101287',
       'SOTON/O.Q. 3101311', 'SOTON/O.Q. 3101312', '373450', '2223',
       'C 4001', '350046', '347082', '3101281', '347091', '350043',
       '347075', '347466', '349202', '349237', '349911',
       'SOTON/O.Q. 3101310', '347077', '350054', '2696', '2692',
       'SOTON/O.Q. 3101309', '2627', '2694', '347468', '2687', '2679',
       '3101278', '2666', 'A/4 31416', '2623', '349248', '2663', '2691',
       '330844', '324669', '323951', '347068', 'PP 4348', '2622', '2648',
       '1601', '312992', '347090', '349224', '2678', '2664', '364848',
       '364849', '54636', '334914', '347471', '3460', 'A/5 21171',
       '350045', '364512', '329944', '330920', '365222', '330963',
       '315087', '315084', '315091', '315089', '315093', '315086',
       '364846', '364858', 'A./5. 2152', '2689', '350042', '350409',
       '367231', '368364', '392095', '343275', 'A/5. 13032', '343276',
       '2680', 'SOTON/O.Q. 3101307', 'A/5 3540', '371109', '349210',
       '349209', '21332', '335097', '370373', '330972', '370369',
       'A/5 3536', '349230', '349229', '349231', 'SOTON/OQ 392090',
       'C.A. 37671', '364500', 'S.P. 3464', '371362', '315090', '2698',
       '7598', '7552', '349228', '382650', '382651', '347080', '349219',
       '349203', 'A/4 48871', 'SC/A4 23568', 'A/4 48873', '386525',
       '345572', '345774', '345778', 'C.A. 2315', '349250', '349238',
       '349225', 'A/5 21172', 'A/5 21175', '330958', '349232', '315088',
       '349226', '2686', '370376', 'A/5. 10482', '364516', '368702',
       'SOTON/OQ 392083', '349241', '336439', 'S.O./P.P. 752', '347072',
       '349912', '347074', '347061', '2674', '2675', '2690', '2695',
       'A/5 3902', '2631', 'C.A. 6212', '367232', 'SOTON/O.Q. 3101308',
       '350036', '364859', '364851', '368323', '330910', '365235',
       'W./C. 6608', 'A/5 1478', '368573', 'SOTON/O.Q. 3101314', '36864',
       '358585', '349254', '14973', '35851', '335677', '363291',
       'SOTON/O.Q. 3101263', 'SOTON/O.Q. 3101306', 'CA 2144', '21440',
       '8471', '376563', '7534', '3101276', '3101277', '347069', '349236',
       'AQ/3. 30631', '65303', '65304', 'STON/O2. 3101279', '345769',
       '2693', '350026', '350025', '350029', 'W./C. 6609', '374887',
       '394140', '370375', '347089', '365226', 'STON/O2. 3101282',
       'STON/O2. 3101290', '7548', '349243', '347086', '382649',
       '3101298', 'C 7075', 'STON/O2. 3101283', '370377', 'A. 2. 39186',
       '348121', '3470', '2685', '349220', 'STON/O2. 3101270',
       'STON/O2. 3101271', '349201', '349240', '350034',
       'SOTON/O.Q. 3101305', '350050', '350047', '350048', '14313',
       '65306', '3101264', '347070', '350052', '7540', '347063', '347467',
       '347742', 'LINE', '347062', 'W./C. 6607', '349204', '350417',
       '350408', '4136', '4137', 'STON/O 2. 3101286', 'STON/O 2. 3101274',
       '8475', '349246', '350053', '347465', '350060', '349256', '2700',
       '2682', '12460', '323592', '9234', '14312', '330911', '363592',
       '368783', '2660', '367227', '367229', '36865', '315152', '315151',
       '315153', '350405', '350404', '349253', '2654', '2624', '4135',
       '349217', 'C 7077', '7935', '7545', '347067', '347065', '2620',
       '4133', 'STON/O 2. 3101292', '2683', '370371', '345781', '347071',
       '347073', '349910', 'STON/O 2. 3101285', '330971', 'S.O./P.P. 251',
       'A/5. 3336', '1222', 'A/5 21173', '315098', '347743', '347469',
       '350403', '349235', 'C.A. 42795', '370370', 'C 17369',
       'STON/O 2. 3101275', '330924', 'AQ/4 3130', 'A/S 2816',
       'STON/O 2. 3101268', '2677', '364850', '36866', '2655', '349213',
       '349257', '2649', '349255', '383123', '367228', '367226', '330932',
       '36568', '330931', '330923', '9232', '370372', '376566', '370368',
       'SOTON/O.Q. 392087', '343095', 'A.5. 11206', '368703', '345501',
       '359306', '349233', '349211', '349207', '349221', '330980',
       '348123', '392096', 'A4. 54510', '371110', '330877', '364506',
       '372622', '312991', '2661', '2626', '374746', '35852', '382653',
       'A./5. 3235', '367230', '347078', '349206', '2667', '2653',
       'A./5. 3338', '349218', '2652', '365237', '349234', '2651',
       '3101297', '363611', '347066', '347470', '350410',
       'SOTON/O2 3101272', 'STON/O 2. 3101289', 'A/4. 39886', '2697',
       '347081', '345364', '370365', '330979', '334912', '371060',
       '366713', '7267', '364856', '14311', '330959', '347085', '368402',
       '330919', 'C 17368', '4579', 'Fa 265302', '350407', '347464',
       '347079', '6563', '315085', '315096', '315094', '349244', '330909',
       '349909', '3101295', '315097', '3411', '349242',
       'SOTON/O.Q. 3101315', '343271', '345498', 'A/5 2817',
       'STON/O 2. 3101294', 'STON/O 2. 3101291', 'A/5 21174', '347083',
       '2668', '330935', '342441', '349245', '349212', '349215', '347076',
       '347087', 'SOTON/O.Q. 392078', '349227', '315095', '315092',
       '349223', '65305', '2629', '362316', '349249', '342684', '382652',
       'STON/O 2. 3101273', '334915', '364498', 'A/5. 3337',
       'S.C./A.4. 23567', '312993', '370129', '342712', 'A/5 3594',
       'A/4. 20589', '383162', '2671', '2672', '2676', '367655',
       'LP 1588', 'SOTON/O.Q. 3101262', 'CA. 2343', '7266', '343120',
       '3101296', '2662', 'PP 9549', '345768', 'A/5. 2151', '342826',
       '36209', '349222', '370374', '345779', '330968', '374910',
       'SOTON/OQ 392082', '2669', '392092', '349251', 'STON/O 2. 3101280',
       '3101265', '347088', '349214', 'SOTON/OQ 392086', '315037',
       '384461', '335432', '348124', 'A.5. 18509', 'A.5. 3236',
       'STON/OQ. 369943', '349208', '349239', 'CA. 2314', 'A/4 45380',
       '3701', '349205', '7553', 'STON/O 2. 3101288', '315083', '347054',
       'SOTON/OQ 392089', 'STON/O 2. 3101269', 'SOTON/OQ 392076',
       '347060', '7538', '350035', '350033', '363294', '2625', '2621',
       '2681', '2684', '32302', '376564', 'STON/O 2. 3101293', '383121',
       '349216', '364499', '364511', '2673', '2641', '2650', '349247',
       '4138', '4134', 'A/5. 851', '345773', '345777', '345780', '345770',
       '345783', '345765', '345764', '345763', '2658', '350416', '350406',
       '349252', '345767', '359309', 'C.A. 49867', 'SOTON/OQ 3101316',
       '345775', '2688', '347064', '3101267', '3101266', '363272', '3410',
       'S.O./P.P. 751', 'A/5 2466', 'SOTON/OQ 3101317', '315154',
       'A/4. 34244', '345771', '2659', '2628', '2647', '2665', '2656',
       '2670', '315082'], dtype=object)

- Both cabin and ticket contain a numerical part and a categorical part in their values.
"""

# let's extract the numerical and categorical part for cabin

data['cabin_num'] = data['cabin'].str.extract('(\d+)') # captures numerical part
data['cabin_cat'] = data['cabin'].str[0] # captures the first letter

data[['cabin', 'cabin_num', 'cabin_cat']].head()
""" 
  cabin cabin_num cabin_cat
0    B5         5         B
1   C22        22         C
2   C22        22         C
3   C22        22         C
4   C22        22         C """

# let's extract the numerical and categorical part for ticket
# the variable ticket is extremely dirty, so there is only so much that we
# can do, but here are some ideas:

# extract the last bit of ticket as number
data['ticket_num'] = data['ticket'].apply(lambda s: s.split()[-1])
data['ticket_num'] = pd.to_numeric(data['ticket_num'],
                                   errors='coerce',
                                   downcast='integer')

# extract the first part of ticket as category
data['ticket_cat'] = data['ticket'].apply(lambda s: s.split()[0])
data['ticket_cat'] = np.where(data['ticket_cat'].str.isdigit(), np.nan,
                              data['ticket_cat'])

data[['ticket', 'ticket_num', 'ticket_cat']].head(20)
""" 
      ticket  ticket_num ticket_cat
0      24160     24160.0        NaN
1     113781    113781.0        NaN
2     113781    113781.0        NaN
3     113781    113781.0        NaN
4     113781    113781.0        NaN
5      19952     19952.0        NaN
6      13502     13502.0        NaN
7     112050    112050.0        NaN
8      11769     11769.0        NaN
9   PC 17609     17609.0         PC
10  PC 17757     17757.0         PC
11  PC 17757     17757.0         PC
12  PC 17477     17477.0         PC
13     19877     19877.0        NaN
14     27042     27042.0        NaN
15  PC 17318     17318.0         PC
16  PC 17558     17558.0         PC
17  PC 17558     17558.0         PC
18     11813     11813.0        NaN
19     13050     13050.0        NaN """

data['ticket_cat'].unique()
""" array([nan, 'PC', 'W.E.P.', 'WE/P', 'F.C.', 'P/PP', 'C.A.', 'C.A./SOTON',
       'S.O.P.', 'F.C.C.', 'SC/AH', 'W./C.', 'S.O.C.', 'SC/PARIS',
       'S.W./PP', 'W/C', 'SCO/W', 'SO/C', 'SC/Paris', 'SC', 'S.O./P.P.',
       'S.C./PARIS', 'SC/A.3', 'SW/PP', 'CA', 'SOTON/O2', 'C',
       'SOTON/O.Q.', 'A/4', 'PP', 'A/5', 'A./5.', 'A/5.', 'SOTON/OQ',
       'S.P.', 'SC/A4', 'AQ/3.', 'STON/O2.', 'A.', 'LINE', 'STON/O',
       'AQ/4', 'A/S', 'A.5.', 'A4.', 'A/4.', 'Fa', 'S.C./A.4.', 'LP',
       'CA.', 'STON/OQ.'], dtype=object) """

data['ticket_num'].hist(bins=50)
plt.show()